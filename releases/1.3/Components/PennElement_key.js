/*! $AC$ PennController.newKey(name,key) Creates a new Key element $AC$$AC$ PennController.getKey(name) Retrieves an existing Key element $AC$$AC$ Key PElement.wait() Waits until the key, or one of the keys, is pressed before proceeding $AC$$AC$ Key PElement.settings.callback(commands) Will run the specified command(s) whenever a valid keypress happens $AC$$AC$ Key PElement.settings.disable() Stops listening to keypresses $AC$$AC$ Key PElement.settings.enable() Starts listening to keypresses (again) $AC$$AC$ Key PElement.settings.log() Will log any valid keypress in the results file $AC$$AC$ Key PElement.test.pressed(key) Checks that the key, or any key if none specified, has been pressed before $AC$ */!function(e){var t={};function s(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=e,s.c=t,s.d=function(e,t,i){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)s.d(i,n,function(t){return e[t]}.bind(null,n));return i},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=124)}({124:function(e,t){window.PennController._AddElementType("Key",function(e){this.immediate=function(t,s){void 0===s&&(this.id=e.utils.guidGenerator(),s=t),"string"==typeof s?this.keys=s.toUpperCase():Number(s)>0?this.keys=String.fromCharCode(s).toUpperCase():e.debug.error("Invalid key(s) passed to new Key &quot;"+t+"&quot; (should be a string or a key code number)",s)},this.uponCreation=function(t){this.pressed=[],this.pressedWait=[],this.log=!1,this.enabled=!0,e.events.keypress(e=>{this.enabled&&(0==this.keys.length||this.keys.match(RegExp(String.fromCharCode(e.which),"i")))&&this.press(e.which)}),this.press=(e=>{this.pressed.push(["Key",e,Date.now(),"NULL"])}),t()},this.end=function(){if(this.log&&this.log instanceof Array)if(this.pressed.length||e.controllers.running.save(this.type,this.id,"Key","NA","Never","NULL"),this.log.indexOf("all")>-1)for(let t in this.pressed)e.controllers.running.save(this.type,this.id,...this.pressed[t]);else if(this.log.indexOf("wait")){let t=!1;for(let s in this.pressed)"Wait success"==this.pressed[s][3]&&(e.controllers.running.save(this.type,this.id,...this.pressed[s]),t=!0);t||e.controllers.running.save(this.type,this.id,"Key","NA","Never","(failed keypresses happened)")}else 1==this.pressed.length?e.controllers.running.save(this.type,this.id,...this.pressed[0]):(this.log.indexOf("first")>-1&&e.controllers.running.save(this.type,this.id,...this.pressed[0]),this.log.indexOf("last")>-1&&e.controllers.running.save(this.type,this.id,...this.pressed[this.pressed.length-1]))},this.value=function(){return this.pressed.length?String.fromCharCode(this.pressed[this.pressed.length-1][1]).toUpperCase():""},this.actions={wait:function(e,t){if("first"==t&&this.pressed.length)e();else{let s=!1,i=this.press;this.press=(n=>{if(i.apply(this,[n]),!s)if(t instanceof Object&&t._runPromises&&t.success){let i=this.enabled;this.enabled=0,t._runPromises().then(t=>{"success"==t?(this.pressed[this.pressed.length-1][3]="Wait success",s=!0,e()):this.pressed[this.pressed.length-1][3]="Wait failure",0===this.enabled&&(this.enabled=i)})}else s=!0,e()})}}},this.settings={callback:function(e,...t){let s=this.press;this.press=async function(e){if(!this.disabled)for(let e in t)await t[e]._runPromises();s.apply(this,[e])},e()},disable:function(e){this.enabled=!1,e()},enable:function(e){this.enabled=!0,e()},log:function(e,...t){t.length?this.log=t:this.log=["wait"],e()}},this.test={pressed:function(e,t){for(let s in this.pressed){let i=this.pressed[s][1];if(Number(e)>0&&i==key)return!0;if("string"==typeof e&&e.match(new RegExp(String.fromCharCode(i),"i")))return!0;if(void 0===e)return!0;if(t)return!1}return!1}}})}});